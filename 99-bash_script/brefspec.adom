#!/data/data/com.termux/files/usr/bin/bash
#This script reads expected chapters:verses from bref spec and tries to locate them in the chapter files.

source ./bfile.adom #methods for brefspec file
source ./cfile.adom #methods for chapter files

main() {
  rpt='999-verseMatch.txt'
  #bkChapters '../01-Genesis' $rpt 1 50
  #bkChapters '../02-Exodus' $rpt 1 40
  bkChapters '../03-Leviticus' $rpt 1 27
  #close any file descriptors
  exec 3<&- #to bfile, briefspec
  exec 4<&- #to a chapter file
  echo '.....end verse statistics'
} #end main()

bkChapters() {
#Check bible book chapters 
#receives four (4) parameters
  #$1 directory for book (i.e. ../01-Genesis, ../02-Exodus, etc)
  #$2 name of a file for a report
  #$3 first expected chapter No. (i.e. 1)
  #$4 last expected chapter No. (i.e. 50)

#INITIALIZATION
#global variable w/o keyword local
rfile="$1/$2" #report file
g_deleteFile $rfile #delete old report file if one exists

bfile_init "$1/999-brefspec" #set fd 3
read_b=false #not necessary to read a line now from brefspec assuming bfile_init already read a line

cfile_init $3 $4 #sets ccurent, cFrmt
cfile_frmt $ccurrent #assume at least chapter 1.
cfile_fd "$1/$cFrmt" #set fd 4
read_c=true #pending read from next chapter

#Identify date/time report was run
dt=`date '+%d/%m/%Y %H:%M:%S'` 
echo 'These are the verses matched between 999-brefspec and the chapter files for Exodus. Date time run: '"$dt" >> $rfile

#Main loop to cycle thru chapters
while true; do
  if [ "$read_b" = true ]; then
    #try to read from brefspec file
    read -u 3 bLINE
    if [ $? -ne 0 ]; then #not success
      echo 'bfile read error or end of file, exiting'
      exit 1
    else
      bfile_frmt #format what was read
      read_b=false #no need to read yet
    fi
  fi

  #update chapter lines/files
  if [ "$read_c" = true ]; then
    read -u 4 cLINE
    if [ $? -ne 0 ]; then #not success
      echo 'read cLINE not successful. assume end of file: cfile, about to compare ccurrent='$ccurrent' with clast='$clast
      if (($ccurrent < $clast)); then
	echo 'incrementing cFrmt'
	ccurrent=$((ccurrent+1))

        cfile_frmt $ccurrent #assume range ok
        cfile_fd "$1/$cFrmt" #set fd 4
	read -u 4 cLINE
	if [ $? -ne 0 ]; then
          echo 'err reading cLINE again, exiting'
	  exit 1
	else
	  read_c=false
	fi
      else
	echo 'end of all the cfiles, exiting'
	exit 1
      fi
    fi
    read_c=false
  fi

if [[ $read_b == true ]] || [[ $read_c == true ]]; then
  echo 'skipping line because of a boolean true, read_b='$read_b', read_c='$read_c
else
  #echo "debug: comparing bLine=$bLINE to cLINE=$cLINE" >> $rfile
  if [[ $cLINE == "$bLINE"* ]]; then
    echo "$bLINE" >> $rfile
    read_b=true
    read_c=true
  else #progress thru bible content
    echo "no match for bLINE=$bLINE, cLINE=$cLINE" 
    read_c=true
  fi #end check on line search
fi #end check on read_b, read_c
done
} #end book_stats()


main "$@" #call main function
