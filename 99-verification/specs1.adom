#!/data/data/com.termux/files/usr/bin/bash
#This script reads expected chapters:verses from bref spec and tries to locate them in the chapter files.

source ./specs.adom #variables & methods for files with specs for verses.
source ./cfile.adom #methods & variables for chapter files

main() {
  #name of something to write a status
  rpt='./specs_rpt'
  g_deleteFile $rpt #if old file is present, delete it.

  #Put date/time at top of the status
  dt=`date '+%d/%m/%Y %H:%M:%S'` 
  echo 'These are the verses matched between 999-brefspec and the chapter files for '$1'. Date time run in the format [d/m/Y h/m/s]: '"$dt" >> $rpt

    Len=${#books[@]} #length of array with list of the 66 books

  #for each book - some statistics
  for (( i=0; i<${Len}; i++ )); do 
    echo "${books[$i]} being checked, if errors they were:" >> $rpt
    Book_stats "../${books[$i]}" "specs/${books[$i]}-spec" $rpt
  done

  #close any leftover file descriptors
  exec 3<&- #to bfile, briefspec
  exec 4<&- #to a chapter file
  echo '.....end verse statistics'
} #end main()

Book_stats() { #stats for one book, supporting loop on books

bfile_init "$2"

while true; do #each chapter
  bfile_read #line describes 1 chapter
  if [ $? -ne 0 ]; then #not success
    #echo 'spec file ended or some type of error occurred' >> $3
    break

  else #loop through a chapter file (cfile) using variables....
    
    #For name, %03d for Pslams because 3 digits, %02d for other books
    printf -v cFrmt "%02d" $((10#$chap))
    #printf -v cFrmt "%03d" $((10#$1))
    #echo "setting cfile_fd with $1/$cFrmt" >> $3
    cfile_fd "$1/$cFrmt"
    for (( j=$firstV; j<=$lastV; j++ )); do
      read -u 4 cLINE
      if [ $? -ne 0 ]; then 
        echo "error reading from chapter file: $1/$cFrmt" >> $3
      else #read succeeded
      
        lineD="$chap:$j"
        if ! [[ $cLINE == "$lineD"* ]]; then
          #echo "line matched: $lineD" >> $3
        #else #progress thru bible content
          echo "line not matched: $lineD" >> $3
        fi #line matched
      fi #return code read chap file
    done #for firstV to lastV
  fi #return code - read from spec file
done #while true keep reading spec file
} #end process_Book()

main "$@" #call main function


    #read_c=true
        #echo 'matched '$bLINE
        #read_b=true
        #read_c=true

#  if [ "$read_b" = true ]; then
#    #try to read from brefspec file
#    bfile_read
#  fi

#  #update chapter lines/files
#  if [ "$read_c" = true ]; then
#    #echo 'calling cfile_read with :'$1
#    cfile_read $1
#    ec=$? #exit (return code)
#    if [ $ec -ne 0 ]; then
#      #exit code echo 'after cfile_read'
#      #end of file(s), quit
#      echo 'bkChapters:cfile_read not successful, maybe end, exit 1'
#      #break
#      exit 1
#    else #set variable that content ready to be analyzed
#      #echo 'bkChapters: calling formatTbd'
#      read_c=false
#    fi
#  fi

#if [[ $read_b == true ]] || [[ $read_c == true ]]; then
#  echo 'skipping line because of a boolean true, read_b='$read_b', read_c='$read_c
#else
#  #echo "debug: comparing bLine=$bLINE to cLINE=$cLINE" >> $3
#  if [[ $cLINE == "$bLINE"* ]]; then
#    echo 'matched bLINE='$bLINE
#    echo "$bLINE" >> $3
#    read_b=true
#    read_c=true
#  else #progress thru bible content
#    echo "no match for bLINE=$bLINE, cLINE=$cLINE" 
#    read_c=true
#  fi #end check on line search
#fi #end check on read_b, read_c
#done

